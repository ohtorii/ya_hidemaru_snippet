/*指定されたディレクトリ以下のスニペット定義ファイルを閲覧するダイアログ。

（マクロ引数）
	無し

（マクロ返値）
	スニペットファイル名 <tab> コマンドライン文字列

		スニペットファイル名		絶対パス
		コマンドライン文字列		コマンド名 引数1 引数2 ... 引数N

		- キャンセル or 失敗すると空白文字列を返します。
		- スニペットファイル名とコマンドライン文字列を区切るためにTAB文字を使用します。

（使用例）
	execmacro "ya_text_viewer.mac";

*/


////////////////////////////////////////////////////////////////////////////
//		グローバル変数(const)
////////////////////////////////////////////////////////////////////////////
#g_snippets_list_width	=50;
#g_snippets_list_height =25;
#g_snippets_text_width	=100;
#g_dialog_width 		=#g_snippets_list_width;
$g_notify_help			="99";

////////////////////////////////////////////////////////////////////////////
//		グローバル変数(Not const)
////////////////////////////////////////////////////////////////////////////
//スニペット引数の最大個数
#g_max_args_num=0;

//キーの押下判定
#g_IsKeyDown[0]=false;


//--------------------------------------------------------------------------
//DLL handle
//--------------------------------------------------------------------------
#g_dengaku_dll	=0;
#g_ht_tools_dll =0;

//--------------------------------------------------------------------------
//マクロ引数
//--------------------------------------------------------------------------
$g_snippets_abs_dir 	= "";

//--------------------------------------------------------------------------
//Dialog
//--------------------------------------------------------------------------
/*リストに対応するファイル名（絶対パス）
ディレクトリは空白文字列。

(例) [0] ""
	 [1] "c:\hidemaru-macro\ya-hidemaru-snippet\snippets\functions\text-mode\email.txt"
	 [2] "c:\hidemaru-macro\ya-hidemaru-snippet\snippets\functions\text-mode\@cmd.%._.txt"
			:
			:
*/
$g_abs_snippets_filename[0] 	= "";
#g_abs_snippets_filename_len	= 0;

/*リストに表示する文字列
*/
$g_snippets_list_item[0]		= "";

/*	$g_abs_snippets_filename[]に対応する情報
*/
$g_command_name[0]			= "";		//コマンド名
#g_fixed_argumet_num[0] 	=0; 		//引数の個数
#g_has_variable_argument[0] =false; 	//可変引数の有無


//コントロール名
$g_list_ctrl_name		= "candidate";
$g_text_ctrl_name		= "viewer";
$g_command_ctrl_name	= "command";

/*リストコントロールのアイテム数
(memo)アイテムを1個追加したときに0となる。
*/
#g_list_ctrl_item_num	= -1;


//--------------------------------------
//スニペットモード名、スニペットモードのインデックス位置
//--------------------------------------
/* $g_snippet_mode_* 配列の個数
*/
#g_snippet_mode_num=0;

/*
(例)	[0] "c:\hidemaru-macro\ya-hidemaru-snippet\snippets\functions\text-mode"
		[1] "c:\hidemaru-macro\ya-hidemaru-snippet\snippets\functions\text-mode\c-mode"
			:
			:
*/
$g_snippet_mode_names[0]="";

/*スニペットモード名がリストの何番目なのか。
（例）	[0] 0		//$g_snippet_mode_names[0]に対応
		[1] 8		//$g_snippet_mode_names[1]に対応
*/
#g_snippet_mode_index[0]=0;

//--------------------------------------
//未入力の固定引数に関する情報
//--------------------------------------
#g_effect_num_no_input_textbox	=0;			//個数
$g_effect_no_input_textbox[0]	="";		//コントロール名
$g_effect_original_color		="#ffffff";	//テキストコントロールの元の色（後で設定される）


//--------------------------------------------------------------------------
//状態
//--------------------------------------------------------------------------
/*現在のスニペットモード
(例)"c:\hidemaru-macro\ya-hidemaru-snippet\snippets\functions\text-mode\c-mode\cpp-mode"
*/
$g_current_snippet_mode="";




////////////////////////////////////////////////////////////////////////////
//		処理
////////////////////////////////////////////////////////////////////////////
call Main;
endmacro $$return;

Main:
	call Initialize;
	if(! ##return){
		return"" ;
	}
	call Run;
	$$result_string = $$return;
	call UnloadDll;
	return $$result_string;


Initialize:
	execmacro currentmacrodirectory+"\\ya_util_get_snippet_dir.mac";
	$g_snippets_abs_dir = getresultex(-1);

	execmacro currentmacrodirectory+"\\ya_util_get_current_snippet_mode.mac";
	$g_current_snippet_mode=getresultex(-1);

	call LoadDll;
	if(! ##return){
		return false;
	}
	return true;


Run:
	call GatherSnippetInfo $g_snippets_abs_dir, "";
	if(! ##return){
		return false;
	}
	//call DebugPrintSnippetModeNameAndIndex;

	call MakeSnippetsArgumentInfo;
	if(! ##return){
		return false;
	}

	call CalcMaxArgNum;
	#g_max_args_num=##return;

	/*call DebugPrintAbsSnippetsFilename;
	return "";*/

	call CreateDialog;
	if(! ##return){
		return "";
	}
	call MessageLoop;
	$$result_string = $$return;
	call EndDialog;
	return $$result_string;


MessageLoop:
	//(memo)リストコントロールで上下キーを押し続けたときに適度な間隔でファイル内容を更新する。
	##interval_tick 		= 150;
	##prev_tick 			= 0;
	
	//リストの選択アイテムに関する変数
	##prev_select_item		= -1;
	##current_list_index	= -1;
	
	//固定引数を入力していないときの警告に関する変数
	##use_warning_effect			=false; //警告演出を行うかどうか
	##warning_effect_tick			=1000;	//警告演出を行う時間
	##warning_effect_start_tick =-1;		//警告演出を開始した時間
	
	disablebreak;
	while(1){
		$$notify = "";
		while ($$notify == "") {
			##current_tick = tickcount;
			if(##interval_tick < (##current_tick - ##prev_tick)){
				$$select_item		= dllfuncstr(#g_dengaku_dll,"GETCTRLSTATE",$g_list_ctrl_name);
				##current_list_index= val($$select_item) - 1;
				if(##current_list_index != ##prev_select_item){
					if(##current_list_index < 0){
						//非選択状態
						call ClearTextViewer;
						call ClearCommandViewer;
					}else{
						call UpdateTextViewer		##current_list_index;
						call UpdateArgumentEditor	##current_list_index;
					}
					##prev_select_item=##current_list_index;
				}
				call UpdateCommandViewer ##current_list_index;
				##prev_tick = ##current_tick;
			}
			if(##use_warning_effect){
				if(##current_tick < (##warning_effect_start_tick+##warning_effect_tick)){
					call UpdateWarningEffect  ##current_tick-##warning_effect_start_tick;
				}else{
					call ResetWarningEffect;
					##use_warning_effect=false;
				}
			}
			$$notify = dllfuncstr(#g_dengaku_dll,"WAITCTRLNOTIFY",10);
			
			##ctrl =iskeydown(0x11);
			if(##ctrl){
				//<c-c>
				call IskeyDown 0x43;
				if(##return){
					return "";
				}
				//<c-m> //Enter
				call IskeyDown 0x4d;
				if(##return){
					$$notify="1";
					continue;
				}
				/*
				//<c-p>
				call IskeyDown 0x50;
				if(##return){
					call SelectSnippet -1;
					continue;
				}
				//<c-n>
				call IskeyDown 0x4e;
				if(##return){
					call SelectSnippet 1;
				}*/
			}
			
			//<f1>
			call IskeyDown 0x70 ;
			if(##return){
				call ShowHelp;
				continue;
			}
		}

		if($$notify == "0"){
			//キャンセル
			return "";
		}else if($$notify == "1"){
			//Enter キー押下
			call CheckFillAllFixedArguments ##current_list_index;
			if(##return){
				break;
			}else{
				##use_warning_effect		=true;
				##warning_effect_start_tick=tickcount;
			}
		}else if($$notify==$g_notify_help){
			//ヘルプボタン押下
			call ShowHelp;
		}
	}
	
	call GetCommandLine ##current_list_index;
	return $g_abs_snippets_filename[##current_list_index] + "\t" + $$return;

CheckFillAllFixedArguments:
	/*固定引数のテキストを全て入力したかどうか調べる
	*/
	##list_index 	= ##1;
	##argument_num	= #g_fixed_argumet_num[##list_index];
	
	#g_effect_num_no_input_textbox = 0;
	
	//
	//固定引数をループする
	//
	##frame_no=0;
	while(##frame_no<##argument_num){
		$$ctrl_name = sprintf("edit%d_0",##frame_no);
		$$text 		= dllfuncstr(#g_dengaku_dll,"GETCTRLSTRING",$$ctrl_name);
		if($$text==""){
			$g_effect_no_input_textbox[#g_effect_num_no_input_textbox]=$$ctrl_name;
			#g_effect_num_no_input_textbox = #g_effect_num_no_input_textbox + 1;
		}
		##frame_no = ##frame_no + 1;
	}
	if(#g_effect_num_no_input_textbox==0){
		return true;
	}
	return false;


GetCommandLine:
	/* ユーザーが入力したコマンドラインを取得する
	返値	コマンドライン文字列
			(例) "for i < 10"
	*/
	##list_index			= ##1;
	##argument_num			= #g_fixed_argumet_num[##list_index];
	##has_variable_argument = #g_has_variable_argument[##list_index];
	$$argument				= "";

	//
	//コマンド名の取得
	//
	$$argument = $g_command_name[##list_index];

	//
	//固定引数の取得
	//
	##frame_no=0;
	while(##frame_no<##argument_num){
		$$argument=$$argument+" " + dllfuncstr(#g_dengaku_dll,"GETCTRLSTRING",sprintf("edit%d_0",##frame_no));
		##frame_no = ##frame_no + 1;
	}

	//
	//可変引数の取得
	//
	if(##has_variable_argument){
		if(0<##argument_num){
			$$argument = $$argument + " ";
		}
		##variable_argument_frame_no = ##argument_num;
		$$argument=$$argument+" "+dllfuncstr(#g_dengaku_dll,"GETCTRLSTRING",sprintf("edit%d_1",##variable_argument_frame_no));
	}

	return $$argument;


/*****************************************************************************
	キーの押下判定
*****************************************************************************/
IskeyDown:
	if(iskeydown(##1)){
		if(!#g_IsKeyDown[##1]){
			//キーが押された瞬間
			#g_IsKeyDown[##1]=true;
			return true;
		}
		//キーを押している
	}else{
		//キーを離している
		#g_IsKeyDown[##1]=false;
	}
	return false;


SelectSnippet:
	##delta=##1;
	##index = val(dllfuncstr(#g_dengaku_dll,"GETCTRLSTATE",$g_list_ctrl_name));
	##next_index=##index+##delta;
	##n = dllfunc(#g_dengaku_dll,"SETCTRLSTATE",$g_list_ctrl_name,str(##next_index));

	return;


ShowHelp:
	message
	"<F1>                 ヘルプの表示\n"+
	"\n"+
	"<Enter>,<Ctrl-m>     確定する\n"+
	"<ESC>,<Ctrl-c>       終了する\n"
	, "ヘルプ"
	, 0x20;
	return;
//	"<Ctrl-n>,<Ctrl-p>    「次・前」のスニペットを選択する\n"+
	

//#region テキストビュアー
ClearTextViewer:
	##n=dllfunc(#g_dengaku_dll,"SETCTRLSTRING",$g_text_ctrl_name,"");
	return;


UpdateTextViewer:
	##index = ##1;
	$$path = $g_abs_snippets_filename[##index];
	if($$path==""){
		call ClearTextViewer;
		return ;
	}
	if(existfile($$path,1) & 0x00000010){
		call ClearTextViewer;
		return ;
	}
	call LoadText $$path;
	$$text = $$return;
	##n=dllfunc(#g_dengaku_dll,"SETCTRLSTRING",$g_text_ctrl_name,$$text);
	return ;


LoadText:
	$$filename		= $$1;
	##file_size 	= dllfunc(#g_ht_tools_dll, "GetFileSizeByte", $$filename);
	##file_handle	= dllfunc(#g_ht_tools_dll, "FileOpen", $$filename, "r");
	$$text			= dllfuncstr(#g_ht_tools_dll, "RdFileByte", ##file_handle, ##file_size);
	##dummy 		= dllfunc(#g_ht_tools_dll, "FileClose", ##file_handle);

	//TAB -> space
	$$text = dllfuncstr(#g_dengaku_dll,"GSUB",$$text,"\t","    ",-1);

	if(strlen($$text) <= 3){
		return $$text;
	}
	##s0 = ascii(midstr($$text,0,1));
	##s1 = ascii(midstr($$text,1,1));
	##s2 = ascii(midstr($$text,2,1));
	if((##s0==0xEF)&&(##s1==0xBB)&&(##s2==0xBF)){
		//UFT8 -> UTF16-LE
		//(memo)BOMを削除する
		$$text=midstr($$text,3);
	}else{
		//UTF8 -> UTF16-LE
		//pass
	}
	##ret = dllfunc(#g_ht_tools_dll,"SetUTF16ConvertString", $$text);
	$$text=dllfuncstrw(#g_ht_tools_dll,"GetResultW");
	return $$text;
//#endregion


//#region 引数エディタ
UpdateArgumentEditor:
	/* 引数エディタのGUIを更新する
	*/
	##select = ##1;

	call DisableAllFrame;

	//
	//引数情報にもとづいて適切なPageを表示する
	//
	//(memo)
	//0→Nの順でコントロールを有効化するとタブによるフォーカス移動が何故か逆順になる。
	//そのため逆順(0←N)で有効化し問題を回避している。
	//

	##argument_num			= #g_fixed_argumet_num[##select];
	##has_variable_argument = #g_has_variable_argument[##select];
	if(##has_variable_argument){
		##variable_argument_frame_no = ##argument_num;
		$$frame=sprintf("frame%d",##variable_argument_frame_no);
		##n=dllfunc(#g_dengaku_dll,"SETCTRLSTATE",$$frame,"2");
		##n=dllfunc(#g_dengaku_dll,"ENABLECTRL",true,sprintf("edit%d_1",##variable_argument_frame_no));
	}


	##frame_no = ##argument_num - 1;
	while(0 <= ##frame_no){
		$$frame=sprintf("frame%d",##frame_no);
		##n=dllfunc(#g_dengaku_dll,"SETCTRLSTATE",$$frame,"1");
		##n=dllfunc(#g_dengaku_dll,"ENABLECTRL",true,sprintf("edit%d_0",##frame_no));

		##frame_no = ##frame_no - 1;
	}

	return ;


DisableAllFrame:
	/*全フレームを無効化する

	memo: 無効化（キーボードフォーカスを得ない）＆空欄ページを表示する
	*/
	##frame_no=0;
	while(##frame_no<#g_max_args_num){
		$$frame=sprintf("frame%d",##frame_no);

		//無効化
		##n=dllfunc(#g_dengaku_dll,"ENABLECTRL",false,sprintf("edit%d_0",##frame_no));
		##n=dllfunc(#g_dengaku_dll,"ENABLECTRL",false,sprintf("edit%d_1",##frame_no));

		//空欄ページを表示する
		##n=dllfunc(#g_dengaku_dll,"SETCTRLSTATE",$$frame,"3");

		##frame_no = ##frame_no + 1;
	}
	return ;
//#endregion


//#region コマンドビューアー
ClearCommandViewer:
	/*コマンドビューアーをクリアする
	*/
	#n = dllfunc(#g_dengaku_dll,"SETCTRLSTRING",$g_command_ctrl_name,"");
	return ;


UpdateCommandViewer:
	/*コマンドビューアーを更新する
	*/
	##list_index = ##1;
	if($g_abs_snippets_filename[##list_index]==""){
		call ClearCommandViewer;
		return ;
	}

	$$command				= $g_command_name[##list_index];
	##argument_num			= #g_fixed_argumet_num[##list_index];
	##has_variable_argument = #g_has_variable_argument[##list_index];

	$$text = $$command;

	/*固定引数の更新
	*/
	##frame_no = 0;
	while(##frame_no < ##argument_num){
		$$s=dllfuncstr(#g_dengaku_dll,"GETCTRLSTRING",sprintf("edit%d_0",##frame_no));
		if($$s==""){
			$$text = $$text + sprintf(" %%%d",##frame_no);
		}else{
			$$text = $$text + " " + $$s;
		}
		##frame_no = ##frame_no + 1;
	}

	/*可変引数の更新
	*/
	if(##has_variable_argument){
		##variable_argument_frame_no = ##argument_num;
		$$frame=sprintf("frame%d",##variable_argument_frame_no);
		$$s=dllfuncstr(#g_dengaku_dll,"GETCTRLSTRING",sprintf("edit%d_1",##variable_argument_frame_no));
		if($$s==""){
			$$text = $$text + " ...";
		}else{
			$$text = $$text + " " + $$s;
		}
	}

	#n = dllfunc(#g_dengaku_dll,"SETCTRLSTRING",$g_command_ctrl_name,$$text);
	return ;

//#region 注意エフェクト
UpdateWarningEffect:
	/*警告の効果を更新する
	
	ユーザーに未入力の固定引数を分かりやすく伝えるのが目的です。
	*/
	##current_tick	= ##1;
	
	##brightness	= 64;	//少し明るい色にする
	##rate			= ##brightness + (##current_tick % (256-##brightness));
	
	##i=0;
	while(##i<#g_effect_num_no_input_textbox){
		//色を変える
		$$color=hex(##rate);
		if(strlen($$color)==1){
			$$color="0"+$$color;
		}
		$$ctrl_name = $g_effect_no_input_textbox[##i];
		##n = dllfunc(#g_dengaku_dll,"SETCTRLEXPROPERTY",$$ctrl_name,"bgcolor",sprintf("#FF%s%s",$$color,$$color));
		
		##i = ##i + 1;
	}
	return ;


ResetWarningEffect:
	/*警告の効果を初期状態に戻す*/
	
	##i=0;
	while(##i<#g_effect_num_no_input_textbox){
		//色を元に戻す
		$$ctrl_name = $g_effect_no_input_textbox[##i];
		##n = dllfunc(#g_dengaku_dll,"SETCTRLEXPROPERTY",$$ctrl_name,"bgcolor",$g_effect_original_color);
		##i = ##i + 1;
	}
	#g_effect_num_no_input_textbox=0;
	return ;
//#endregion


//#retion スニペットの情報収集
GatherSnippetInfo:
	/*スニペットの情報を集める。
	集めた情報はグロバール変数へ格納する。
	*/
	$$root_dir		= $$1;
	$$space 		= $$2;
	$$sub_dir		= "";
	##sub_dir_len	= 0;

	//
	//カレントディレクトリにあるスニペットのファイル名を取得する（非再帰）
	//
	##prev__list_ctrl_item_num = #g_list_ctrl_item_num;
	call MakeFileItems $$root_dir, $$space;
	if(##return==-1){
		return false;
	}else if(0<##return){
		call MakeSnippetModeNameAndIndex $$root_dir, ##prev__list_ctrl_item_num;
	}

	call SurroundDoubleQuotation $$root_dir + "\\*.*";
	$$file_pattern = $$return;
	//
	//サブディレクトリを列挙する（非再帰）
	//
	##r = dllfunc(#g_dengaku_dll,"ENUMDIR",$$file_pattern);
	while (1) {
		$$dir = dllfuncstr(#g_dengaku_dll,"FINDNEXT");
		if ($$dir == "") break;
		else if ($$dir == "." || $$dir == "..") continue;

		$$sub_dir[##sub_dir_len] = $$dir;
		##sub_dir_len = ##sub_dir_len + 1;
	}

	//
	//先ほど列挙したサブディレクトリを辿る
	//
	##index = 0;
	while (##index < ##sub_dir_len){
		$$current_sub_dir	= $$sub_dir[##index];
		$$abs_path			= $$root_dir + "\\" + $$current_sub_dir;

		//リストコントロールへディレクトリを追加する
		call AppendListItem $$space, $$current_sub_dir, $$abs_path, true;
		if(! ##return){
			return false;
		}

		//
		//再帰的に処理する
		//
		call GatherSnippetInfo $$abs_path, $$space+"　　　　";
		if(! ##return){
			return false;
		}
		##index = ##index + 1;
	}
	return true;

/*
return	> 0 	追加したアイテム数
		== -1	失敗
*/
MakeSnippetModeNameAndIndex:
	$$abs_path=$$1;
	##index=##2;
	$g_snippet_mode_names[#g_snippet_mode_num]=$$abs_path;
	#g_snippet_mode_index[#g_snippet_mode_num]=##index;
	#g_snippet_mode_num = #g_snippet_mode_num + 1;
	return ;


MakeSnippetsArgumentInfo:
	/*スニペットの引数情報を全て作る

	（入力）$g_abs_snippets_filename[]

	（出力）$g_command_name[]
			#g_fixed_argumet_num[]
			#g_has_variable_argument[]
	*/
	##i=0;
	while (##i<#g_abs_snippets_filename_len) {
		call MakeSnippetsArgumentInfoOne ##i;
		##i = ##i + 1;
	}
	return true;


MakeSnippetsArgumentInfoOne:
	/*スニペットの引数情報を１つ作る
	*/
	##index=##1;

	execmacro currentmacrodirectory+"\\ya_util_parse_snippet_command.mac", $g_abs_snippets_filename[##index];
	$$parsed=getresultex(-1);

	##has_variable_argument =val(midstr($$parsed,0,1));
	##num_argument			=val(midstr($$parsed,1,2));
	$$command				=midstr($$parsed,3);
	$g_command_name[##index]			=$$command;
	#g_fixed_argumet_num[##index]		=##num_argument;
	#g_has_variable_argument[##index]	=##has_variable_argument;
	return;


CalcMaxArgNum:
	/*スニペット引数の最大個数を計算する
	*/
	##max_args	=0;
	##i 		=0;
	while (##i<#g_abs_snippets_filename_len) {
		##n=#g_fixed_argumet_num[##i];
		if(#g_has_variable_argument[##i]){
			##n = ##n + 1;
		}
		if(##max_args<##n){
			##max_args=##n;
		}
		##i = ##i + 1;
	}
	return ##max_args;
//#endregion


//#region ダイアログ作成
CreateDialog:
	##dialog_width=#g_snippets_list_width+#g_snippets_text_width;
	call CreatePageAll ##dialog_width;
	if(! ##return){
		call FailedCreateDialog;
		return false;
	}
	
	execmacro currentmacrodirectory+"\\ya_util_get_version.mac";
	$$version=getresultex(-1);
	
	if( dllfunc(#g_dengaku_dll,"NEWDIALOG", 	sprintf("スニペット挿入[version %s]",$$version),#g_dialog_width,"0 0 center 'ＭＳ ゴシック'")	== 0 ||
		/*スニペット一覧*/
		dllfunc(#g_dengaku_dll,"NEWCONTROL",	"list", 			$g_list_ctrl_name,"")		==0 ||
		dllfunc(#g_dengaku_dll,"SETCTRLHEIGHT", "", 				#g_snippets_list_height)	==0 ||
		dllfunc(#g_dengaku_dll,"SETCTRLWIDTH",	"", 				#g_snippets_list_width) 	==0 ||
		/*複数行テキスト表示*/
		dllfunc(#g_dengaku_dll,"NEWCOLUMN", 						#g_snippets_text_width) 	==0 ||
		dllfunc(#g_dengaku_dll,"NEWCONTROL",	"mledit",			$g_text_ctrl_name)			==0 ||
		dllfunc(#g_dengaku_dll,"SETCTRLHEIGHT", $g_text_ctrl_name,	#g_snippets_list_height)	==0 ||
		dllfunc(#g_dengaku_dll,"ENABLECTRL",	false,				$g_text_ctrl_name)			==0 ||
		dllfunc(#g_dengaku_dll,"NEWPAGE",		##dialog_width)												==0 ||
		dllfunc(#g_dengaku_dll,"NEWCONTROL",	"text", 			$g_command_ctrl_name,"")	==0
	){
		call FailedCreateDialog;
		return false;
	}
	call NewFrameAll;
	if(! ##return){
		call FailedCreateDialog;
		return false;
	}
	
	//ヘルプボタンの作成
	if(1){
		if(	dllfunc(#g_dengaku_dll,"NEWCONTROL","text", "","Press F1 for help.") ==0 ){
			call FailedCreateDialog;
			return false;
		}
	}else{
		//(memo)タブキー押下でヘルプボタンにフォーカスが移動し使いにくい
		if( dllfunc(#g_dengaku_dll,"NEWCONTROL",	"button",	"yas@Help", "?") == 0	||
			dllfunc(#g_dengaku_dll,"SETCTRLWIDTH", "", 		8) == 0 				||
			dllfunc(#g_dengaku_dll,"SETCTRLNOTIFY","", 		$g_notify_help) == 0	){
			call FailedCreateDialog;
			return false;
		}
	}
	
	##frame_no=0;
	while(##frame_no<#g_max_args_num){
		//引数エディタは空欄ページを表示する
		$$frame=sprintf("frame%d",##frame_no);
		##n=dllfunc(#g_dengaku_dll,"SETCTRLSTATE",$$frame,"3");
		##frame_no = ##frame_no + 1;
	}

	call MakeSnippetTree;
	if(! ##return){
		return false;
	}

	call SelectSnippetModeItem $g_current_snippet_mode;
	if(! ##return){
		//未選択状態なので最初のアイテムを選択する。
		##n = dllfunc(#g_dengaku_dll,"SETCTRLSTATE",$g_list_ctrl_name,"1");
	}
	if (!dllfunc(#g_dengaku_dll,"SHOWDIALOG",hidemaruhandle(0),1)){
		message("SHOWDIALOG に失敗しました");
		return false;
	}
	return true;


MakeFileItems:
	$$root_dir	= $$1;
	$$space 	= $$2;

	call SurroundDoubleQuotation $$root_dir + "\\*.*";
	$$file_pattern	= $$return;

	##append_num=0;
	##r = dllfunc(#g_dengaku_dll,"ENUMFILE",$$file_pattern);
	while (1) {
		$$filename = dllfuncstr(#g_dengaku_dll,"FINDNEXT");
		if ($$filename == "") {
			break;
		}
		$$abs_filename = $$root_dir + "\\" + $$filename;
		call AppendListItem $$space,$$filename,$$abs_filename, false;
		if(! ##return){
			return -1;
		}
		##append_num = ##append_num + 1;
	}
	return ##append_num;


AppendListItem:
	$$space 		= $$1;
	$$rel_filename	= $$2;
	$$abs_filename	= $$3;
	##is_folder 	= ##4;

	if(##is_folder){
		$g_abs_snippets_filename[#g_abs_snippets_filename_len]	= "";
	}else{
		$g_abs_snippets_filename[#g_abs_snippets_filename_len]	= $$abs_filename;
	}
	if(##is_folder){
		$$listctrl_item_name=$$space+$$rel_filename;
	}else{
		$$listctrl_item_name=$$space+dllfuncstr(#g_ht_tools_dll,"GetFileBaseName", $$rel_filename);
	}
	$g_snippets_list_item[#g_abs_snippets_filename_len]=$$listctrl_item_name;

	#g_abs_snippets_filename_len= #g_abs_snippets_filename_len + 1;
	#g_list_ctrl_item_num		= #g_list_ctrl_item_num + 1;
	return true;


MakeSnippetTree:
	/*スニペットのツリーを作成する
	*/
	##i=0;
	while(##i<#g_abs_snippets_filename_len){
		if(dllfunc(#g_dengaku_dll, "SETCTRLITEM", $g_list_ctrl_name, $g_snippets_list_item[##i]) == 0){
			call FailedCreateDialog;
			return false;
		}
		##i = ##i + 1;
	}
	return true;


SelectSnippetModeItem:
	/*スニペットモードに対応するリストアイテムを選択する
	return	true	リストアイテムの選択に成功した
			false	リストアイテムの選択に失敗した
	*/
	$$snippet_dir=$g_current_snippet_mode;
	##i=0;
	while(##i<#g_snippet_mode_num){
		if($$snippet_dir==$g_snippet_mode_names[##i]){
			//(memo)リストコントロールは1から開始なので+1する。
			//		更に最初のスニペットを選択するため+1する。
			##index=#g_snippet_mode_index[##i]+1+1;
			##n = dllfunc(#g_dengaku_dll,"SETCTRLSTATE",$g_list_ctrl_name,str(##index));
			return true;
		}
		##i = ##i + 1;
	}
	return false;


CreatePageAll:
	/*引数エディタで利用するページを全て作成する
	*/
	##width=##1;
	##frame_no=0;
	while(##frame_no<#g_max_args_num){
		call CreatePage ##frame_no,##width;
		if(!##return){
			return false;
		}
		##frame_no = ##frame_no + 1;
	}
	return true;


CreatePage:
	/*引数エディタで利用するページを一つ作成する
	*/
	##frame_no=##1;
	##width=##2;

	$$page0=sprintf("page%d_0",##frame_no);
	$$page1=sprintf("page%d_1",##frame_no);
	$$page2=sprintf("page%d_2",##frame_no);

	$$edit0=sprintf("edit%d_0",##frame_no);
	$$edit1=sprintf("edit%d_1",##frame_no);
	$$edit2=sprintf("edit%d_2",##frame_no);

	$$text0=sprintf("%%%d",##frame_no);

	##static_text_width=3;

	//Page0 (固定引数)
	if (dllfunc(#g_dengaku_dll,"NEWDLGPAGE",  $$page0,	##width)		== 0	||
		dllfunc(#g_dengaku_dll,"NEWCONTROL",  "text",	"", $$text0)	== 0	||
		dllfunc(#g_dengaku_dll,"SETCTRLWIDTH","",		##static_text_width)== 0	||
		dllfunc(#g_dengaku_dll,"NEWCONTROL",  "edit",	$$edit0, "")	== 0	||
		dllfunc(#g_dengaku_dll,"ENABLECTRL",  false,	$$edit0)		== 0	||

		//Page1 (可変引数)
		dllfunc(#g_dengaku_dll,"NEWDLGPAGE",  $$page1,	##width)		== 0	||
		dllfunc(#g_dengaku_dll,"NEWCONTROL",  "text",	"", "...")		== 0	||
		dllfunc(#g_dengaku_dll,"SETCTRLWIDTH","",		##static_text_width)== 0	||
		dllfunc(#g_dengaku_dll,"NEWCONTROL",  "edit",	$$edit1, "")	== 0	||
		dllfunc(#g_dengaku_dll,"ENABLECTRL",  false,	$$edit1)		== 0	||

		//Page2（空欄）
		dllfunc(#g_dengaku_dll,"NEWDLGPAGE",  $$page2,	##width)		== 0	||
		dllfunc(#g_dengaku_dll,"NEWCONTROL",  "text",	"", "") 		== 0	)
	{
		return false;
	}
	return true;


NewFrameAll:
	/*frameとページを全て(#g_max_args_num個)作成する
	*/
	##frame_no=0;
	while(##frame_no<#g_max_args_num){
		/*引数入力のページ*/
		$$frame=sprintf("frame%d",##frame_no);
		if( dllfunc(#g_dengaku_dll,"NEWCONTROL","frame",$$frame,"") == 0	||
			dllfunc(#g_dengaku_dll,"SETCTRLITEM",$$frame,sprintf("page%d_0",##frame_no),"-1") == 0	||
			dllfunc(#g_dengaku_dll,"SETCTRLITEM",$$frame,sprintf("page%d_1",##frame_no),"-1") == 0	||
			dllfunc(#g_dengaku_dll,"SETCTRLITEM",$$frame,sprintf("page%d_2",##frame_no),"-1") == 0
		){
			return false;
		}
		##frame_no = ##frame_no + 1;
	}
	return true;


FailedCreateDialog:
	message "ダイアログの生成に失敗しました";
	return;


SurroundDoubleQuotation:
	return "\"" + $$1 + "\"";


EndDialog:
	##n=dllfunc(#g_dengaku_dll,"ENDDIALOG");
	return ;
//#endregion


//#region デバッグ
DebugPrintSnippetModeNameAndIndex:
	debuginfo 1;
	debuginfo "==== DebugPrintSnippetModeNameAndIndex ====";
	##i=0;
	while(##i<#g_snippet_mode_num){
		debuginfo sprintf("[%d]%s",#g_snippet_mode_index[##i],$g_snippet_mode_names[##i]);
		##i = ##i + 1;
	}
	return ;


DebugPrintAbsSnippetsFilename:
	debuginfo 1;
	debuginfo "==== DebugPrintAbsSnippetsFilename ====";
	##i=0;
	while(##i<#g_abs_snippets_filename_len){
		debuginfo sprintf("[%d]%s",##i,$g_abs_snippets_filename[##i]);
		##i = ##i + 1;
	}
	return ;


//#region DLL
LoadDll:
	if(#g_dengaku_dll==0){
		#g_dengaku_dll=loaddll(macrodir + "\\DengakuDLL.dll");
		if (#g_dengaku_dll==0) {
			#g_dengaku_dll=loaddll(hidemarudir + "\\DengakuDLL.dll");
			if (#g_dengaku_dll==0) {
				message "田楽DLLのロードに失敗しました\nDengakuDLL.dllが秀丸のディレクトリに存在するか確認してください";
				return false;
			}
		}
	}

	if(#g_ht_tools_dll==0){
		#g_ht_tools_dll = loaddll(macrodir + "\\ht_tools.dll");
		if (#g_ht_tools_dll==0) {
			#g_ht_tools_dll = loaddll(hidemarudir + "\\ht_tools.dll");
			if (#g_ht_tools_dll==0) {
				message "ht_tool.dllのロードに失敗しました\n" + "ht_tool.dllが秀丸のディレクトリに存在するか確認してください";
				return false;
			}
		}
	}
	return true;


UnloadDll:
	if(#g_dengaku_dll){
		freedll #g_dengaku_dll;
		#g_dengaku_dll=0;
	}
	if(#g_ht_tools_dll){
		freedll #g_ht_tools_dll;
		#g_ht_tools_dll=0;
	}
	return;
//#endregion